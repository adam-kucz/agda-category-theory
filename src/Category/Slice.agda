{-# OPTIONS --exact-split --safe --prop #-}
module Category.Slice where

open import Category.Definition

open import Universes
open import Type.Sum
open import Proposition.Sum renaming (_,_ to _,,_)
open import Proposition.Identity
open import Proof

_‚ï±_ : (‚ÑÇ : Category ùí∞ ùí±) (A : obj ‚¶É ‚ÑÇ ‚¶Ñ) ‚Üí Category (ùí∞ ‚äî ùí±) ùí±
‚ÑÇ ‚ï± A = record
  { obj = Œ£ Œª (X : obj) ‚Üí X ~> A
  ; _~>_ = Œª { (X , f) (Y , g) ‚Üí Œ£‚Çö Œª (h : X ~> Y) ‚Üí g ‚àò h == f }
  ; id = Œª { (X , f) ‚Üí id X ,, right-unit f }
  ; _‚àò_ = Œª { {(X , f)} {(Y , g)} {(Z , h)} (i‚ÇÅ ,, p‚ÇÅ) (i‚ÇÇ ,, p‚ÇÇ) ‚Üí i‚ÇÅ ‚àò i‚ÇÇ ,,
    (proof h ‚àò (i‚ÇÅ ‚àò i‚ÇÇ)
      ‚å™ _==_ ‚å™ h ‚àò i‚ÇÅ ‚àò i‚ÇÇ :by: assoc h i‚ÇÅ i‚ÇÇ
      ‚å™ _==_ ‚å™ g ‚àò i‚ÇÇ     :by: ap (_‚àò i‚ÇÇ) p‚ÇÅ
      ‚å™ _==_ ‚å™ f         :by: p‚ÇÇ
    qed)}
  ; left-unit = Œª { (i ,, _) ‚Üí Œ£‚Çö== (left-unit i) }
  ; right-unit = Œª { (i ,, _) ‚Üí Œ£‚Çö== (right-unit i) }
  ; assoc = Œª { (i‚ÇÅ ,, p‚ÇÅ) (i‚ÇÇ ,, p‚ÇÇ) (i‚ÇÉ ,, p‚ÇÉ) ‚Üí Œ£‚Çö== (assoc i‚ÇÅ i‚ÇÇ i‚ÇÉ) }
  }
  where instance _ = ‚ÑÇ

open import Functor
open import Relation.Binary.Property using (sym)

CompositionFunctor :
  {‚ÑÇ : Category ùí∞ ùí±}
  ‚Üí let instance _ = ‚ÑÇ in
  {A B : obj}
  (f : A ~> B)
  ‚Üí -----------------------
  Functor (‚ÑÇ ‚ï± A) (‚ÑÇ ‚ï± B)
CompositionFunctor {‚ÑÇ = ‚ÑÇ} f‚ÇÅ = record
  { F‚ÇÄ = Œª { (X , f) ‚Üí X , f‚ÇÅ ‚àò f }
  ; F‚ÇÅ = Œª { {X , f} {Y , g} (i ,, p) ‚Üí i ,,
    (proof f‚ÇÅ ‚àò g ‚àò i
      === f‚ÇÅ ‚àò (g ‚àò i) :by: sym (assoc f‚ÇÅ g i)
      === f‚ÇÅ ‚àò f       :by: ap (f‚ÇÅ ‚àò_) p
    qed) }
  ; id-preserv = Œª { (X , _) ‚Üí Œ£‚Çö== (Id.refl (id X)) }
  ; ‚àò-preserv = Œª { (i‚ÇÅ ,, p‚ÇÅ) (i‚ÇÇ ,, p‚ÇÇ) ‚Üí Œ£‚Çö== (Id.refl (i‚ÇÅ ‚àò i‚ÇÇ)) }
  }
  where instance _ = ‚ÑÇ

