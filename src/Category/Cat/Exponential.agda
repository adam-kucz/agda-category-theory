{-# OPTIONS --exact-split --prop #-}
module Category.Cat.Exponential where

open import Category.Cat.Definition
open import Category.Cat.Product

open import Universes
open import Type.Sum hiding (_√ó_) renaming (_,_ to _Œ£,_)
open import Logic
open import Proof

open import Category
open import Functor
open import NaturalTransformation
open import Category.FunCategory
open import Category.Product hiding (_√ó_)
open import Construction.Product as P hiding (‚å©_,_‚å™)
open import Construction.Exponential

open import Function.Extensionality
open import Functor.Extensionality

private
  instance _ = CatCategory

!Cur-F :
  (A B Z : Category ùí∞ ùí∞)
  (F : Functor (Z √ó A) B)
  (Cur-F' : Functor Z (FunCategory A B))
  (p : App A B o (Cur-F' ‚ä† Id A) == F)
  ‚Üí --------------------------------------
  Cur-F' == Cur F
!Cur-F A B Z F Cur-F' p = funct-ext Cur-F' Cur-F ‚àÄX‚ÜíCur-F'X==Cur-FX
  Œª {X}{Y} f ‚Üí ‚üπhet== (F‚ÇÅ ‚¶É Cur-F' ‚¶Ñ f)(F‚ÇÅ ‚¶É Cur-F ‚¶Ñ f)
    (refl A)(refl B)
    (subrel $ ‚àÄX‚ÜíCur-F'X==Cur-FX X)
    (subrel $ ‚àÄX‚ÜíCur-F'X==Cur-FX Y) $
    fun-ext Œª x ‚Üí
    proof F‚ÇÅ ‚¶É Cur-F' ‚¶Ñ f at x
      het== F‚ÇÅ ‚¶É App A B o (Cur-F' ‚ä† Id A) ‚¶Ñ (f Œ£, id ‚¶É A ‚¶Ñ x)
        :by: {!App A B!}
      het== F‚ÇÅ (f Œ£, id ‚¶É A ‚¶Ñ x)
        :by: ? -- ap (Œª ‚Äî ‚Üí F‚ÇÅ ‚¶É ‚Äî ‚¶Ñ (f Œ£, id ‚¶É A ‚¶Ñ x)) ‚¶É Relating-all-==-het== ‚¶Ñ p
      het== F‚ÇÅ ‚¶É Cur-F ‚¶Ñ f at x  :by: Het.refl _
    qed
  where instance _ = F
        Cur-F = Cur F
        ‚àÄX‚ÜíCur-F'X==Cur-FX : (X : obj ‚¶É Z ‚¶Ñ)
          ‚Üí ----------------------------------------
          F‚ÇÄ ‚¶É Cur-F' ‚¶Ñ X == F‚ÇÄ ‚¶É Cur-F ‚¶Ñ X
        ‚àÄX‚ÜíCur-F'X==Cur-FX z =
          funct-ext (F‚ÇÄ ‚¶É Cur-F' ‚¶Ñ z)(F‚ÇÄ ‚¶É Cur-F ‚¶Ñ z)
          (Œª a ‚Üí let x = z Œ£, a in
            proof F‚ÇÄ ‚¶É F‚ÇÄ ‚¶É Cur-F' ‚¶Ñ z ‚¶Ñ a
              === F‚ÇÄ ‚¶É App A B ‚¶Ñ (F‚ÇÄ ‚¶É Cur-F' ‚¶Ñ z Œ£, a) :by: Id.refl _
              === F‚ÇÄ ‚¶É App A B o (Cur-F' ‚ä† id A) ‚¶Ñ x
                :by: ap (F‚ÇÄ ‚¶É App A B ‚¶Ñ) $ sym $
                     ‚àßleft (Cat-prod-prop (Cur-F' ‚àò pi‚ÇÅ Z A)(pi‚ÇÇ Z A)) x
              === F‚ÇÄ (z Œ£, a) :by: ap (Œª ‚Äî ‚Üí F‚ÇÄ ‚¶É ‚Äî ‚¶Ñ x) p
            qed)
          Œª f ‚Üí {!!}

CatExponentials : HasExponentials (CatCategory {ùí∞}{ùí∞})
Exponential.exp (CatExponentials {A = A} {B}) = FunCategory A B
Exponential.app (CatExponentials {A = A} {B}) = App A B
IsExponential.curry (Exponential.exp-def (CatExponentials {A = A} {B})) Z F =
  Cur-F , (
  funct-ext (App A B o Cur‚ä†Id) F
    (Œª {x@(z Œ£, a) ‚Üí
    proof F‚ÇÄ ‚¶É App A B o Cur‚ä†Id ‚¶Ñ x
      === F‚ÇÄ ‚¶É App A B ‚¶Ñ (F‚ÇÄ ‚¶É Cur-F ‚¶Ñ z Œ£, a)
        :by: ap (F‚ÇÄ ‚¶É App A B ‚¶Ñ) $
             ‚àßleft (Cat-prod-prop (Cur-F ‚àò pi‚ÇÅ Z A)(pi‚ÇÇ Z A)) x
      === F‚ÇÄ x :by: Id.refl _
    qed})
    (Œª { {x@(xz Œ£, xa)}{y@(yz Œ£, ya)} f@(fz Œ£, fa) ‚Üí
    proof F‚ÇÅ ‚¶É App A B o Cur‚ä†Id ‚¶Ñ f
      het== F‚ÇÅ ‚¶É App A B ‚¶Ñ (F‚ÇÅ ‚¶É Cur-F ‚¶Ñ fz Œ£, fa)
        :by: Het.ap3
             (Œª X Y (f : mor (FunCategory A B √ó A) X Y) ‚Üí F‚ÇÅ ‚¶É App A B ‚¶Ñ f)
             (‚àßleft (Cat-prod-prop (Cur-F ‚àò pi‚ÇÅ Z A)(pi‚ÇÇ Z A)) x)
             (subrel $ ‚àßleft (Cat-prod-prop (Cur-F ‚àò pi‚ÇÅ Z A)(pi‚ÇÇ Z A)) y)
             (‚àßright (Cat-prod-prop (Cur-F ‚àò pi‚ÇÅ Z A)(pi‚ÇÇ Z A)) f)
      === (F‚ÇÅ ‚¶É Cur-F ‚¶Ñ fz at ya) ‚àò[ B ] F‚ÇÅ ‚¶É F‚ÇÄ ‚¶É Cur-F ‚¶Ñ xz ‚¶Ñ fa
        :by: Id.refl _
      === F‚ÇÅ (fz Œ£, id ‚¶É A ‚¶Ñ ya) ‚àò[ B ] F‚ÇÅ (id ‚¶É Z ‚¶Ñ xz Œ£, fa)
        :by: Id.refl _
      === F‚ÇÅ (fz ‚àò[ Z ] id ‚¶É Z ‚¶Ñ xz Œ£, id ‚¶É A ‚¶Ñ ya ‚àò[ A ] fa)
        :by: sym $ ‚àò-preserv (fz Œ£, id ‚¶É A ‚¶Ñ ya)(id ‚¶É Z ‚¶Ñ xz Œ£, fa) 
      === F‚ÇÅ (fz Œ£, fa)
        :by: ap2 (Œª a b ‚Üí F‚ÇÅ (a Œ£, b)) (right-unit ‚¶É Z ‚¶Ñ fz)
                                       (left-unit ‚¶É A ‚¶Ñ fa)
    qed}) , (!Cur-F A B Z F))
  where instance _ = F
        Cur-F : Functor Z (FunCategory A B)
        Cur-F = Cur F
        Cur‚ä†Id = Cur-F ‚ä† id A
