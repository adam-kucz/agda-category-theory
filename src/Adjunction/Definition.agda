{-# OPTIONS --exact-split --safe --prop #-}
module Adjunction.Definition where

open import Category
open import Functor
open import NaturalTransformation renaming (Composition to _O_)

open import Universes
open import Proposition.Identity hiding (refl)

infix 230 _‚ä£_
record _‚ä£_
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  (F : Functor ‚ÑÇ ùîª)
  (G : Functor ùîª ‚ÑÇ)
  : ----------------------------------------
  ùí∞ ‚äî ùí± ‚äî ùí≤ ‚äî ùíØ Àô
  where
  private
    instance _ = ‚ÑÇ; _ = ùîª
  field
    Œ∑ : Id ‚ÑÇ ‚üπ G o F
    Œµ : F o G ‚üπ Id ùîª
    axiom-F : right-compose Œµ F O left-compose F Œ∑ == Identity F
    axiom-G : left-compose G Œµ O right-compose Œ∑ G == Identity G

open _‚ä£_ ‚¶É ‚Ä¶ ‚¶Ñ public

{-# DISPLAY _‚ä£_.Œ∑ A = Œ∑ #-}
{-# DISPLAY _‚ä£_.Œµ A = Œµ #-}

Adjunction== :
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  {F : Functor ‚ÑÇ ùîª}
  {G : Functor ùîª ‚ÑÇ}
  (A B : F ‚ä£ G)
  (p : Œ∑ ‚¶É A ‚¶Ñ == Œ∑ ‚¶É B ‚¶Ñ)
  (q : Œµ ‚¶É A ‚¶Ñ == Œµ ‚¶É B ‚¶Ñ)
  ‚Üí -----------------------------
  A == B
Adjunction== A A (Id‚Çö.refl _) (Id‚Çö.refl _) = Id‚Çö.refl A

open import Function hiding (id; _‚àò_; _$_)
open import Proof

-- alternative definition
infix 230 _-|_
record _-|_
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  (F : Functor ‚ÑÇ ùîª)
  (G : Functor ùîª ‚ÑÇ)
  : ----------------------------------------
  ùí∞ ‚äî ùí± ‚äî ùí≤ ‚äî ùíØ Àô
  where
  private
    instance _ = ‚ÑÇ; _ = ùîª
    F0 = F‚ÇÄ ‚¶É F ‚¶Ñ
    F1 = F‚ÇÅ ‚¶É F ‚¶Ñ
    G0 = F‚ÇÄ ‚¶É G ‚¶Ñ
    G1 = F‚ÇÅ ‚¶É G ‚¶Ñ
  field
    bijection : ‚àÄ X Y ‚Üí Bijection (X ~> G0 Y) (F0 X ~> Y)
    right-extend : ‚àÄ {X Y Y'}
      (f : X ~> G0 Y)
      (g : Y ~> Y')
      ‚Üí let ‚ÑÇ‚Üíùîª  = forw ‚¶É bijection X Y ‚¶Ñ
            ‚ÑÇ‚Üíùîª' = forw ‚¶É bijection X Y' ‚¶Ñ
      in
      g ‚àò ‚ÑÇ‚Üíùîª f == ‚ÑÇ‚Üíùîª' (G1 g ‚àò f)
    left-extend : ‚àÄ {X' X Y}
      (f : X ~> G0 Y)
      (g : X' ~> X)
      ‚Üí let ‚ÑÇ‚Üíùîª  = forw ‚¶É bijection X Y ‚¶Ñ
            ‚ÑÇ‚Üíùîª' = forw ‚¶É bijection X' Y ‚¶Ñ
      in
      ‚ÑÇ‚Üíùîª f ‚àò F1 g == ‚ÑÇ‚Üíùîª' (f ‚àò g)

  private
    instance
      bij  = Œª {X}{Y} ‚Üí bijection X Y
      _ = Œª {X}{Y} ‚Üí inverse-left ‚¶É bi-inverse ‚¶É bij {X}{Y} ‚¶Ñ ‚¶Ñ
      _ = Œª {X}{Y} ‚Üí inverse-right ‚¶É bi-inverse ‚¶É bij {X}{Y} ‚¶Ñ ‚¶Ñ

  right-extend-back : ‚àÄ {X Y Y'}
      (f : F0 X ~> Y)
      (g : Y ~> Y')
      ‚Üí let ùîª‚Üí‚ÑÇ  = back ‚¶É bijection X Y ‚¶Ñ
            ùîª'‚Üí‚ÑÇ = back ‚¶É bijection X Y' ‚¶Ñ
      in
      G1 g ‚àò ùîª‚Üí‚ÑÇ f == ùîª'‚Üí‚ÑÇ (g ‚àò f)
  right-extend-back f g =
    proof G1 g ‚àò back f
      === back (forw (G1 g ‚àò back f))
        :by: sym $ subrel $ left-inv (G1 g ‚àò back f)
      === back (forw (back (g ‚àò f)))
        :by: ap back (
          proof forw (G1 g ‚àò back f)
            === g ‚àò forw (back f)
              :by: sym $ right-extend (back f) g
            === g ‚àò f
              :by: ap (g ‚àò_) $ subrel $ right-inv f
            === forw (back (g ‚àò f))
              :by: sym $ subrel $ right-inv (g ‚àò f) [: _==_ ]
          qed)
      === back (g ‚àò f)
        :by: subrel $ left-inv (back (g ‚àò f))
    qed

  left-extend-back : ‚àÄ {X X' Y}
      (f : F0 X ~> Y)
      (g : X' ~> X)
      ‚Üí let ùîª‚Üí‚ÑÇ  = back ‚¶É bijection X Y ‚¶Ñ
            ùîª'‚Üí‚ÑÇ = back ‚¶É bijection X' Y ‚¶Ñ
      in
      ùîª‚Üí‚ÑÇ f ‚àò g == ùîª'‚Üí‚ÑÇ (f ‚àò F1 g)
  left-extend-back f g =
    proof back f ‚àò g
      === back (forw (back f ‚àò g))
        :by: sym $ subrel $ left-inv (back f ‚àò g)
      === back (forw (back (f ‚àò F1 g)))
        :by: ap back (
        proof forw (back f ‚àò g)
            === forw (back f) ‚àò F1 g
              :by: sym $ left-extend (back f) g
            === f ‚àò F1 g
              :by: ap (_‚àò F1 g) $ subrel $ right-inv f
            === forw (back (f ‚àò F1 g))
              :by: sym $ subrel $ right-inv (f ‚àò F1 g) [: _==_ ]
          qed)
      === back (f ‚àò F1 g)
        :by: subrel $ left-inv (back (f ‚àò F1 g))
    qed

‚ä£‚Üí-| :
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  {F : Functor ‚ÑÇ ùîª}
  {G : Functor ùîª ‚ÑÇ}
  (A : F ‚ä£ G)
  ‚Üí --------------------
  F -| G
forw ‚¶É _-|_.bijection (‚ä£‚Üí-| {‚ÑÇ = ‚ÑÇ}{ùîª}{F}{G} A) X Y ‚¶Ñ X~>GY =
  Œµ at Y ‚àò F‚ÇÅ ‚¶É F ‚¶Ñ X~>GY
  where instance _ = ùîª; _ = A
back ‚¶É _-|_.bijection (‚ä£‚Üí-| {‚ÑÇ = ‚ÑÇ}{ùîª}{F}{G} A) X Y ‚¶Ñ FX~>Y =
  F‚ÇÅ ‚¶É G ‚¶Ñ FX~>Y ‚àò Œ∑ at X
  where instance _ = ‚ÑÇ; _ = A
bi-inverse ‚¶É _-|_.bijection (‚ä£‚Üí-| {‚ÑÇ = ‚ÑÇ}{ùîª}{F}{G} A) X Y ‚¶Ñ =
  let
  instance
    _ = ‚ÑÇ; _ = ùîª; _ = F; _ = G; _ = A
    F0 = F‚ÇÄ ‚¶É F ‚¶Ñ
    F1 = F‚ÇÅ ‚¶É F ‚¶Ñ
    G0 = F‚ÇÄ ‚¶É G ‚¶Ñ
    G1 = F‚ÇÅ ‚¶É G ‚¶Ñ
    _ = _-|_.bijection (‚ä£‚Üí-| A) X Y
    left-inverse : LeftInverse forw back
    left-inverse = record { left-inv = Œª f ‚Üí subrel (
      proof G1 (Œµ at Y ‚àò F1 f) ‚àò Œ∑ at X
        === G1 (Œµ at Y) ‚àò G1 (F1 f) ‚àò Œ∑ at X
          :by: ap (_‚àò Œ∑ at X) $ ‚àò-preserv ‚¶É G ‚¶Ñ (Œµ at Y) (F1 f)
        === G1 (Œµ at Y) ‚àò (G1 (F1 f) ‚àò Œ∑ at X)
          :by: sym $ assoc _ _ _
        === G1 (Œµ at Y) ‚àò (Œ∑ at G0 Y ‚àò f)
          :by: ap (G1 (Œµ at Y) ‚àò_) $ sym $ naturality ‚¶É Œ∑ ‚¶Ñ f
        === G1 (Œµ at Y) ‚àò Œ∑ at G0 Y ‚àò f
          :by: assoc (G1 (Œµ at Y)) (Œ∑ at G0 Y) f
        === (G1 (Œµ at Y) ‚àò id (G0 (F0 (G0 Y)))) ‚àò
            (G1 (F1 (id (G0 Y))) ‚àò Œ∑ at G0 Y) ‚àò
            f
          :by: ap2 (Œª f‚ÇÄ f‚ÇÅ ‚Üí f‚ÇÄ ‚àò f‚ÇÅ ‚àò f)
                   (sym $ right-unit (G1 (Œµ at Y)))
                   (proof Œ∑ at G0 Y
                      === id (G0 (F0 (G0 Y))) ‚àò Œ∑ at G0 Y
                        :by: sym $ left-unit (Œ∑ at G0 Y)
                      === G1 (F1 (id (G0 Y))) ‚àò Œ∑ at G0 Y
                        :by: ap (_‚àò Œ∑ at G0 Y) $
                             sym $ id-preserv ‚¶É G o F ‚¶Ñ (G0 Y)
                             [: _==_ ]
                    qed)
        === left-compose G Œµ O right-compose Œ∑ G at Y ‚àò f
          :by: Id.refl _
        === Identity G at Y ‚àò f
          :by: ap (Œª ‚Äî ‚Üí ‚Äî at Y ‚àò f) $ axiom-G
        === f :by: left-unit f [: _==_ ]
      qed)}
    right-inverse : RightInverse forw back
    right-inverse = record { right-inv = Œª f ‚Üí subrel (
      proof Œµ at Y ‚àò F1 (G1 f ‚àò Œ∑ at X)
        === Œµ at Y ‚àò (F1 (G1 f) ‚àò F1 (Œ∑ at X))
          :by: ap (Œµ at Y ‚àò_) $ ‚àò-preserv ‚¶É F ‚¶Ñ (G1 f) (Œ∑ at X)
        === Œµ at Y ‚àò F1 (G1 f) ‚àò F1 (Œ∑ at X)
          :by: assoc _ _ _
        === f ‚àò Œµ at F0 X ‚àò F1 (Œ∑ at X)
          :by: ap (_‚àò F1 (Œ∑ at X)) $ naturality ‚¶É Œµ ‚¶Ñ f
        === f ‚àò (Œµ at F0 X ‚àò F1 (Œ∑ at X))
          :by: sym $ assoc f _ _
        === f ‚àò ((id (F0 X) ‚àò Œµ at F0 X) ‚àò (F1 (Œ∑ at X) ‚àò id (F0 X)))
          :by: ap (f ‚àò_) $ sym $
               ap2 _‚àò_ (left-unit (Œµ at F0 X))
                       (right-unit (F1 (Œ∑ at X)))
        === f ‚àò right-compose Œµ F O left-compose F Œ∑ at X
          :by: Id.refl _
        === f ‚àò Identity F at X
          :by: ap (Œª ‚Äî ‚Üí f ‚àò ‚Äî at X) $ axiom-F
        === f :by: right-unit f [: _==_ ]
      qed)}
  in record {}
_-|_.right-extend (‚ä£‚Üí-| {‚ÑÇ = ‚ÑÇ}{ùîª}{F}{G} A) {X}{Y}{Y'} X~>GY Y~>Y' =
  proof Y~>Y' ‚àò (Œµ at Y ‚àò F1 X~>GY)
    === Y~>Y' ‚àò Œµ at Y ‚àò F1 X~>GY
      :by: assoc _ _ _
    === Œµ at Y' ‚àò F1 (G1 Y~>Y') ‚àò F1 X~>GY
      :by: ap (_‚àò  F1 X~>GY) $ sym $ naturality ‚¶É Œµ ‚¶Ñ Y~>Y'
    === Œµ at Y' ‚àò (F1 (G1 Y~>Y') ‚àò F1 X~>GY)
      :by: sym $ assoc _ _ _
    === Œµ at Y' ‚àò F1 (G1 Y~>Y' ‚àò X~>GY)
      :by: ap (Œµ at Y' ‚àò_) $ sym $ ‚àò-preserv _ _
  qed
  where instance _ = ‚ÑÇ; _ = ùîª; _ = F; _ = G; _ = A
        F0 = F‚ÇÄ ‚¶É F ‚¶Ñ
        F1 = F‚ÇÅ ‚¶É F ‚¶Ñ
        G0 = F‚ÇÄ ‚¶É G ‚¶Ñ
        G1 = F‚ÇÅ ‚¶É G ‚¶Ñ
_-|_.left-extend (‚ä£‚Üí-| {‚ÑÇ = ‚ÑÇ}{ùîª}{F}{G} A){X'}{X}{Y} X~>GY X'~>X =
  proof Œµ at Y ‚àò F1 X~>GY ‚àò F1 X'~>X
    === Œµ at Y ‚àò (F1 X~>GY ‚àò F1 X'~>X)
      :by: sym $ assoc _ _ _
    === Œµ at Y ‚àò F1 (X~>GY ‚àò X'~>X)
      :by: ap (Œµ at Y ‚àò_) $ sym $ ‚àò-preserv X~>GY X'~>X
  qed
  where instance _ = ‚ÑÇ; _ = ùîª; _ = F; _ = G; _ = A
        F0 = F‚ÇÄ ‚¶É F ‚¶Ñ
        F1 = F‚ÇÅ ‚¶É F ‚¶Ñ
        G0 = F‚ÇÄ ‚¶É G ‚¶Ñ
        G1 = F‚ÇÅ ‚¶É G ‚¶Ñ
