{-# OPTIONS --exact-split --safe --prop #-}
module Adjunction.Definition where

open import Category
open import Functor
open import NaturalTransformation renaming (Composition to _O_)

open import Universes
open import Proposition.Identity hiding (refl)

record _‚ä£_
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  (F : Functor ‚ÑÇ ùîª)
  (G : Functor ùîª ‚ÑÇ)
  : ----------------------------------------
  ùí∞ ‚äî ùí± ‚äî ùí≤ ‚äî ùíØ Àô
  where
  private
    instance _ = ‚ÑÇ; _ = ùîª
  field
    Œ∑ : Id ‚ÑÇ ‚üπ G o F
    Œµ : F o G ‚üπ Id ùîª
    axiom-F : right-compose Œµ F O left-compose F Œ∑ == Identity F
    axiom-G : left-compose G Œµ O right-compose Œ∑ G == Identity G

open _‚ä£_ ‚¶É ‚Ä¶ ‚¶Ñ public

{-# DISPLAY _‚ä£_.Œ∑ A = Œ∑ #-}
{-# DISPLAY _‚ä£_.Œµ A = Œµ #-}

Adjunction== :
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  {F : Functor ‚ÑÇ ùîª}
  {G : Functor ùîª ‚ÑÇ}
  (A B : F ‚ä£ G)
  (p : Œ∑ ‚¶É A ‚¶Ñ == Œ∑ ‚¶É B ‚¶Ñ)
  (q : Œµ ‚¶É A ‚¶Ñ == Œµ ‚¶É B ‚¶Ñ)
  ‚Üí -----------------------------
  A == B
Adjunction== A A (Id‚Çö.refl _) (Id‚Çö.refl _) = Id‚Çö.refl A

open import Function using (Bijection; forw)

-- alternative definition
record _-|_
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  (F : Functor ‚ÑÇ ùîª)
  (G : Functor ùîª ‚ÑÇ)
  : ----------------------------------------
  ùí∞ ‚äî ùí± ‚äî ùí≤ ‚äî ùíØ Àô
  where
  private
    instance _ = ‚ÑÇ; _ = ùîª
    F0 = F‚ÇÄ ‚¶É F ‚¶Ñ
    F1 = F‚ÇÅ ‚¶É F ‚¶Ñ
    G0 = F‚ÇÄ ‚¶É G ‚¶Ñ
    G1 = F‚ÇÅ ‚¶É G ‚¶Ñ
  field
    bijection : ‚àÄ X Y ‚Üí Bijection (X ~> G0 Y) (F0 X ~> Y)
    right-extend : ‚àÄ {X Y Y'}
      (f : X ~> G0 Y)
      (g : Y ~> Y')
      ‚Üí let ‚ÑÇ‚Üíùîª  = forw ‚¶É bijection X Y ‚¶Ñ
            ‚ÑÇ‚Üíùîª' = forw ‚¶É bijection X Y' ‚¶Ñ
        in
      g ‚àò ‚ÑÇ‚Üíùîª f == ‚ÑÇ‚Üíùîª' (G1 g ‚àò f)
    left-extend : ‚àÄ {X' X Y}
      (f : X ~> G0 Y)
      (g : X' ~> X)
      ‚Üí let ‚ÑÇ‚Üíùîª  = forw ‚¶É bijection X Y ‚¶Ñ
            ‚ÑÇ‚Üíùîª' = forw ‚¶É bijection X' Y ‚¶Ñ
        in
      ‚ÑÇ‚Üíùîª f ‚àò F1 g == ‚ÑÇ‚Üíùîª' (f ‚àò g)

open import Proof

‚ä£‚Üí-| :
  {‚ÑÇ : Category ùí∞ ùí±}
  {ùîª : Category ùí≤ ùíØ}
  {F : Functor ‚ÑÇ ùîª}
  {G : Functor ùîª ‚ÑÇ}
  (A : F ‚ä£ G)
  ‚Üí --------------------
  F -| G
‚ä£‚Üí-| {‚ÑÇ = ‚ÑÇ}{ùîª}{F}{G} A = record
  { bijection = Œª X Y ‚Üí record
    { forw = Œª X~>GY ‚Üí Œµ at Y ‚àò F1 X~>GY
    ; back = Œª FX~>Y ‚Üí G1 FX~>Y ‚àò Œ∑ at X
    ; left-inverse = Œª f ‚Üí
      proof G1 (Œµ at Y ‚àò F1 f) ‚àò Œ∑ at X
        ‚å™ _==_ ‚å™ G1 (Œµ at Y) ‚àò G1 (F1 f) ‚àò Œ∑ at X
          :by: ap (_‚àò Œ∑ at X) $ ‚àò-preserv ‚¶É G ‚¶Ñ (Œµ at Y) (F1 f)
        ‚å™ _==_ ‚å™ G1 (Œµ at Y) ‚àò (G1 (F1 f) ‚àò Œ∑ at X)
          :by: sym $ assoc _ _ _
        ‚å™ _==_ ‚å™ G1 (Œµ at Y) ‚àò (Œ∑ at G0 Y ‚àò f)
          :by: ap (G1 (Œµ at Y) ‚àò_) $ sym $ naturality ‚¶É Œ∑ ‚¶Ñ f
        ‚å™ _==_ ‚å™ G1 (Œµ at Y) ‚àò Œ∑ at G0 Y ‚àò f
          :by: assoc _ _ _
        ‚å™ _==_ ‚å™ left-compose G (Œµ) O right-compose (Œ∑) G
                   at Y ‚àò f
          :by: refl _
        ‚å™ _==_ ‚å™ Identity G at Y ‚àò f
          :by: ap (Œª ‚Äî ‚Üí ‚Äî at Y ‚àò f) $ axiom-G
        ‚å™ _==_ ‚å™ f :by: left-unit f
      qed
    ; right-inverse = Œª f ‚Üí
      proof Œµ at Y ‚àò F1 (G1 f ‚àò Œ∑ at X)
        ‚å™ _==_ ‚å™ Œµ at Y ‚àò (F1 (G1 f) ‚àò F1 (Œ∑ at X))
          :by: ap (Œµ at Y ‚àò_) $ ‚àò-preserv ‚¶É F ‚¶Ñ (G1 f) (Œ∑ at X)
        ‚å™ _==_ ‚å™ Œµ at Y ‚àò F1 (G1 f) ‚àò F1 (Œ∑ at X)
          :by: assoc _ _ _
        ‚å™ _==_ ‚å™ f ‚àò Œµ at F0 X ‚àò F1 (Œ∑ at X)
          :by: ap (_‚àò F1 (Œ∑ at X)) $ naturality ‚¶É Œµ ‚¶Ñ f
        ‚å™ _==_ ‚å™ f ‚àò (Œµ at F0 X ‚àò F1 (Œ∑ at X))
          :by: sym $ assoc _ _ _
        ‚å™ _==_ ‚å™ f ‚àò right-compose (Œµ) F O left-compose F (Œ∑) at X
          :by: refl _
        ‚å™ _==_ ‚å™ f ‚àò Identity F at X
          :by: ap (Œª ‚Äî ‚Üí f ‚àò ‚Äî at X) $ axiom-F
        ‚å™ _==_ ‚å™ f :by: right-unit f
      qed
    }
  ; right-extend = Œª {X}{Y}{Y'} X~>GY Y~>Y' ‚Üí
    proof Y~>Y' ‚àò (Œµ at Y ‚àò F1 X~>GY)
      ‚å™ _==_ ‚å™ Y~>Y' ‚àò Œµ at Y ‚àò F1 X~>GY
        :by: assoc _ _ _
      ‚å™ _==_ ‚å™ Œµ at Y' ‚àò F1 (G1 Y~>Y') ‚àò F1 X~>GY
        :by: ap (_‚àò  F1 X~>GY) $ sym $ naturality ‚¶É Œµ ‚¶Ñ Y~>Y'
      ‚å™ _==_ ‚å™ Œµ at Y' ‚àò (F1 (G1 Y~>Y') ‚àò F1 X~>GY)
        :by: sym $ assoc _ _ _
      ‚å™ _==_ ‚å™ Œµ at Y' ‚àò F1 (G1 Y~>Y' ‚àò X~>GY)
        :by: ap (Œµ at Y' ‚àò_) $ sym $ ‚àò-preserv _ _
    qed
  ; left-extend = Œª {X'}{X}{Y} X~>GY X'~>X ‚Üí
    proof Œµ at Y ‚àò F1 X~>GY ‚àò F1 X'~>X
      ‚å™ _==_ ‚å™ Œµ at Y ‚àò (F1 X~>GY ‚àò F1 X'~>X)
        :by: sym $ assoc _ _ _
      ‚å™ _==_ ‚å™ Œµ at Y ‚àò F1 (X~>GY ‚àò X'~>X)
        :by: ap (Œµ at Y ‚àò_) $ sym $ ‚àò-preserv X~>GY X'~>X
    qed
  }
  where private instance _ = ‚ÑÇ; _ = ùîª; _ = F; _ = G; _ = A
        F0 = F‚ÇÄ ‚¶É F ‚¶Ñ
        F1 = F‚ÇÅ ‚¶É F ‚¶Ñ
        G0 = F‚ÇÄ ‚¶É G ‚¶Ñ
        G1 = F‚ÇÅ ‚¶É G ‚¶Ñ

