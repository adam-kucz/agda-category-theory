{-# OPTIONS --exact-split --prop #-}
module Adjunction.Property where

open import Adjunction.Definition

open import Universes hiding (A)
open import Type.Sum hiding (_,_)
open import Proposition.Sum
open import Function
  renaming (id to id-fun; Bijection to Bij)
  using (_‚àò‚Çõ_; _~_; inverse-left; inverse-right; left-inv; right-inv)
open import Logic
open import Proof

open import Category
open import Functor
open import NaturalTransformation
  renaming (Composition to _O_;
            right-compose to rc;
            left-compose to lc)

open import Axiom.UniqueChoice
open import Axiom.FunctionExtensionality

char-left-adjoint :
  ‚¶É ‚ÑÇ : Category ùí∞ ùí± ‚¶Ñ
  ‚¶É ùîª : Category ùí≤ ùíØ ‚¶Ñ
  {G : Functor ùîª ‚ÑÇ}
  (p : ‚àÄ (X : obj) ‚Üí
       Œ£ Œª (FX : obj) ‚Üí
       Œ£‚Çö Œª (Œ∑X : X ~> F‚ÇÄ ‚¶É G ‚¶Ñ FX) ‚Üí
       ‚àÄ (Y : obj)(f : X ~> F‚ÇÄ ‚¶É G ‚¶Ñ Y) ‚Üí
       ‚àÉ! Œª (f-bar : FX ~> Y) ‚Üí
       F‚ÇÅ ‚¶É G ‚¶Ñ f-bar ‚àò Œ∑X == f)
  ‚Üí ---------------------
  ‚àÉ Œª (F : Functor ‚ÑÇ ùîª) ‚Üí
  ‚àÉ Œª (A : F ‚ä£ G) ‚Üí
    ‚ä§
char-left-adjoint ‚¶É ‚ÑÇ ‚¶Ñ ‚¶É ùîª ‚¶Ñ {G} p = F , (-|‚Üí‚ä£ A , ‚ãÜ‚Çö)
  where instance _ = G
        F' : (X : obj) ‚Üí obj
        F' X = pr‚ÇÅ (p X)
        Œ∑' : (X : obj) ‚Üí X ~> F‚ÇÄ (F' X)
        Œ∑' X = elem (pr‚ÇÇ (p X))
        bar : {X : obj}{Y : obj}
          (f : X ~> F‚ÇÄ Y)
          ‚Üí -------------------------
          Œ£‚Çö Œª (f-bar : F' X ~> Y) ‚Üí
          F‚ÇÅ f-bar ‚àò Œ∑' X == f ‚àß
          ‚àÄ (f-bar' : F' X ~> Y)
            (p : F‚ÇÅ f-bar' ‚àò Œ∑' X == f) ‚Üí
            f-bar' == f-bar
        bar {X}{Y} f = !choice (prop (pr‚ÇÇ (p X)) Y f)
        forw :
          {X : obj ‚¶É ‚ÑÇ ‚¶Ñ}
          {Y : obj ‚¶É ùîª ‚¶Ñ}
          (f : X ~> F‚ÇÄ Y)
          ‚Üí F' X ~> Y
        forw f = elem (bar f)
        back : 
          {X : obj ‚¶É ‚ÑÇ ‚¶Ñ}
          {Y : obj ‚¶É ùîª ‚¶Ñ}
          (f : F' X ~> Y)
          ‚Üí X ~> F‚ÇÄ Y
        back {X}{Y} f = F‚ÇÅ f ‚àò Œ∑' X
        back‚àòforw~id :
          {X : obj ‚¶É ‚ÑÇ ‚¶Ñ}
          {Y : obj ‚¶É ùîª ‚¶Ñ}
          ‚Üí back {X}{Y} ‚àò‚Çõ forw {X}{Y} ~ id-fun
        back‚àòforw~id f = ‚àßleft (prop (bar f))
        forw‚àòback~id :
          {X : obj ‚¶É ‚ÑÇ ‚¶Ñ}
          {Y : obj ‚¶É ùîª ‚¶Ñ}
          ‚Üí forw {X}{Y} ‚àò‚Çõ back {X}{Y} ~ id-fun
        forw‚àòback~id {X}{Y} f =
          sym $ ‚àßright (prop (bar (F‚ÇÅ f ‚àò Œ∑' X))) f (refl _)
        F : Functor ‚ÑÇ ùîª
        F‚ÇÄ ‚¶É F ‚¶Ñ = F'
        F‚ÇÅ ‚¶É F ‚¶Ñ {X}{Y} f = forw (Œ∑' Y ‚àò f)
        id-preserv ‚¶É F ‚¶Ñ X =
          proof forw (Œ∑' X ‚àò id X)
            === id (F' X)
              :by: sym $
                ‚àßright (prop (bar (Œ∑' X ‚àò id X)))
                       (id (F' X)) (
                proof F‚ÇÅ (id (F' X)) ‚àò Œ∑' X
                  === id (F‚ÇÄ (F' X)) ‚àò Œ∑' X
                    :by: ap (_‚àò Œ∑' X) $ id-preserv (F' X)
                  === Œ∑' X ‚àò id X
                    :by: bi-unit (Œ∑' X)
                qed)
          qed
        ‚àò-preserv ‚¶É F ‚¶Ñ {X}{Y}{Z} g f =
          proof forw (Œ∑' Z ‚àò (g ‚àò f))
            === forw (Œ∑' Z ‚àò g) ‚àò forw (Œ∑' Y ‚àò f)
            :by: sym $
              ‚àßright (prop (bar (Œ∑' Z ‚àò (g ‚àò f))))
                     (forw (Œ∑' Z ‚àò g) ‚àò forw (Œ∑' Y ‚àò f)) (
              proof back (forw (Œ∑' Z ‚àò g) ‚àò forw (Œ∑' Y ‚àò f))
                === F‚ÇÅ (forw (Œ∑' Z ‚àò g)) ‚àò
                    F‚ÇÅ (forw (Œ∑' Y ‚àò f)) ‚àò
                    Œ∑' X
                  :by: ap (_‚àò Œ∑' X) $
                       ‚àò-preserv (forw (Œ∑' Z ‚àò g)) (forw (Œ∑' Y ‚àò f))
                === F‚ÇÅ (forw (Œ∑' Z ‚àò g)) ‚àò
                    back (forw (Œ∑' Y ‚àò f))
                  :by: sym $ assoc _ _ _
                === F‚ÇÅ (forw (Œ∑' Z ‚àò g)) ‚àò (Œ∑' Y ‚àò f)
                  :by: ap (F‚ÇÅ (forw (Œ∑' Z ‚àò g)) ‚àò_) $
                       back‚àòforw~id (Œ∑' Y ‚àò f)
                === back (forw (Œ∑' Z ‚àò g)) ‚àò f
                  :by: assoc _ _ f
                === Œ∑' Z ‚àò g ‚àò f
                  :by: ap (_‚àò f) $ back‚àòforw~id (Œ∑' Z ‚àò g)
                === Œ∑' Z ‚àò (g ‚àò f)
                  :by: sym $ assoc _ g f
              qed)
          qed
        forw-id-comp : ‚àÄ {X Y : obj ‚¶É ùîª ‚¶Ñ}
          (f : X ~> Y)
          ‚Üí -----------------------------
          forw (id (F‚ÇÄ Y)) ‚àò
          forw (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f)
          ==
          forw (id (F‚ÇÄ Y) ‚àò F‚ÇÅ f)
        forw-id-comp {X}{Y} f = ‚àßright
          (prop (bar (id (F‚ÇÄ Y) ‚àò F‚ÇÅ f)))
          (forw (id (F‚ÇÄ Y)) ‚àò forw (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f)) $
          (proof back (forw (id (F‚ÇÄ Y)) ‚àò forw (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f))
             === F‚ÇÅ (forw (id (F‚ÇÄ Y))) ‚àò
                 F‚ÇÅ (forw (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f)) ‚àò
                 Œ∑' (F‚ÇÄ X)
               :by: ap (_‚àò Œ∑' (F‚ÇÄ X)) $
                 ‚àò-preserv (forw (id (F‚ÇÄ Y)))
                 (elem (bar (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f)))
             === F‚ÇÅ (forw (id (F‚ÇÄ Y))) ‚àò
                 back (forw (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f))
               :by: sym $ assoc _ _ _
             === F‚ÇÅ (forw (id (F‚ÇÄ Y))) ‚àò
                 (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f)
               :by: ap (F‚ÇÅ (forw (id (F‚ÇÄ Y))) ‚àò_) $
                    back‚àòforw~id (Œ∑' (F‚ÇÄ Y) ‚àò F‚ÇÅ f)
             === back (forw (id (F‚ÇÄ Y))) ‚àò F‚ÇÅ f
               :by: assoc _ _ _
             === id (F‚ÇÄ Y) ‚àò F‚ÇÅ f
               :by: ap (_‚àò F‚ÇÅ f) $ back‚àòforw~id (id (F‚ÇÄ Y))
           qed)
        open import Adjunction.Equivalence
        A : F -| G
        Bij.forw (_-|_.bijection A X Y) = forw
        Bij.back (_-|_.bijection A X Y) = back
        left-inv ‚¶É
          inverse-left ‚¶É Bij.bi-inverse (_-|_.bijection A X Y) ‚¶Ñ ‚¶Ñ =
          back‚àòforw~id
        right-inv ‚¶É
          inverse-right ‚¶É Bij.bi-inverse (_-|_.bijection A X Y) ‚¶Ñ ‚¶Ñ =
          forw‚àòback~id
        _-|_.right-extend A {X}{Y}{Z} f g =
          proof g ‚àò forw f
            === forw (back (g ‚àò forw f))
              :by: sym $ forw‚àòback~id _
            === forw (back (forw (F‚ÇÅ g ‚àò f)))
              :by: ap forw (
                proof back (g ‚àò forw f)
                  === F‚ÇÅ g ‚àò F‚ÇÅ (forw f) ‚àò Œ∑' X
                    :by: ap (_‚àò Œ∑' _) $ ‚àò-preserv ‚¶É G ‚¶Ñ g (forw f) 
                  === F‚ÇÅ g ‚àò back (forw f)
                    :by: sym $ assoc _ _ _
                  === F‚ÇÅ g ‚àò f
                    :by: ap (F‚ÇÅ g ‚àò_) $ back‚àòforw~id f
                  === back (forw (F‚ÇÅ g ‚àò f))
                    :by: sym $ back‚àòforw~id _
                qed)
            === forw (F‚ÇÅ g ‚àò f)
              :by: forw‚àòback~id _
          qed
        _-|_.left-extend A {X'}{X}{Y} f g =
          proof forw f ‚àò forw (Œ∑' X ‚àò g)
            === forw (back (forw f ‚àò forw (Œ∑' X ‚àò g)))
              :by: sym $ forw‚àòback~id _
            === forw (back (forw (f ‚àò g)))
              :by: ap forw (
                proof back (forw f ‚àò forw (Œ∑' X ‚àò g))
                  === F‚ÇÅ (forw f) ‚àò F‚ÇÅ (forw (Œ∑' X ‚àò g)) ‚àò Œ∑' X'
                    :by: ap (_‚àò Œ∑' X') $ ‚àò-preserv ‚¶É G ‚¶Ñ (forw f) (forw (Œ∑' X ‚àò g))
                  === F‚ÇÅ (forw f) ‚àò back (forw (Œ∑' X ‚àò g))
                    :by: sym $ assoc _ _ _
                  === F‚ÇÅ (forw f) ‚àò (Œ∑' X ‚àò g)
                    :by: ap (F‚ÇÅ (forw f) ‚àò_) $ back‚àòforw~id (Œ∑' X ‚àò g)
                  === back (forw f) ‚àò g
                    :by: assoc _ _ g
                  === f ‚àò g
                    :by: ap (_‚àò g) $ back‚àòforw~id f
                  === back (forw (f ‚àò g))
                    :by: sym $ back‚àòforw~id (f ‚àò g)
                qed)
            === forw (f ‚àò g)
              :by: forw‚àòback~id (forw (f ‚àò g))
          qed
