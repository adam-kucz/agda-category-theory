{-# OPTIONS --exact-split --prop #-}
open import Universes
open import Category
module Construction.Pullback.Syntax ‚¶É ‚ÑÇ : Category ùí∞ ùí± ‚¶Ñ where

open import Type.Sum renaming (_,_ to _Œ£,_) hiding (‚å©_,_‚å™)
open import Proposition.Sum

open import Axiom.UniqueChoice

open import Construction.Pullback.Definition as Pull

infixl 181 _√ó[_]_ explicit√ó
_√ó[_]_ : (A C B : obj){f : A ~> C}{g : B ~> C}‚¶É P : Pullback f g ‚¶Ñ ‚Üí obj
(A √ó[ C ] B) ‚¶É P Œ£, _ , _ ‚¶Ñ = P

explicit√ó : (A B C : obj)(f : A ~> C)(g : B ~> C)‚¶É P : Pullback f g ‚¶Ñ ‚Üí obj
explicit√ó A B C f g ‚¶É P Œ£, _ , _ ‚¶Ñ = P

syntax explicit√ó A B C f g = A √ó[ f ~> C <~ g ] B

private
  module Properties {A B C : obj}
                    {f : A ~> C}{g : B ~> C}
                    ‚¶É P : Pullback f g ‚¶Ñ
                    where
    open import Logic
    open import Proof

    p‚ÇÅ : A √ó[ C ] B ~> A
    p‚ÇÅ = pr‚ÇÅ (pr‚ÇÇ (elem P))
    p‚ÇÇ : A √ó[ C ] B ~> B
    p‚ÇÇ = pr‚ÇÇ (pr‚ÇÇ (elem P))

    get-mor :
      {Z : obj}
      (z‚ÇÅ : Z ~> A)
      (z‚ÇÇ : Z ~> B)
      (p : f ‚àò z‚ÇÅ == g ‚àò z‚ÇÇ)
      ‚Üí ------------------
      Œ£‚Çö Œª (u : Z ~> A √ó[ C ] B) ‚Üí p‚ÇÅ ‚àò u == z‚ÇÅ ‚àß p‚ÇÇ ‚àò u == z‚ÇÇ  ‚àß
         ‚àÄ (u' : Z ~> A √ó[ C ] B) (p : p‚ÇÅ ‚àò u' == z‚ÇÅ  ‚àß p‚ÇÇ ‚àò u' == z‚ÇÇ) ‚Üí
         u' == u
    get-mor z‚ÇÅ z‚ÇÇ p = !choice (‚àßright (prop P) z‚ÇÅ z‚ÇÇ p)
    
    ‚å©_,_‚å™ :
      {Z : obj}
      (z‚ÇÅ : Z ~> A)
      (z‚ÇÇ : Z ~> B)
      ‚¶É p : f ‚àò z‚ÇÅ == g ‚àò z‚ÇÇ ‚¶Ñ
      ‚Üí ------------------
      Z ~> A √ó[ C ] B
    ‚å© z‚ÇÅ , z‚ÇÇ ‚å™ = elem (get-mor z‚ÇÅ z‚ÇÇ from-instance)

open Properties hiding (get-mor) public
