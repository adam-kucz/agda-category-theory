{-# OPTIONS --exact-split --prop #-}
open import Universes
open import Category
module Construction.Pullback.Syntax {‚ÑÇ : Category ùí∞ ùí±} where

open import Axiom.UniqueChoice

open import Construction.Pullback.Definition as Pull
open import Construction.Cone.Universal.Definition ‚¶É ‚ÑÇ ‚¶Ñ ùïÄ

private
  instance _ = ‚ÑÇ

infixl 181 _√ó[_]_ explicit√ó
_√ó[_]_ : (A C B : obj){f : A ~> C}{g : B ~> C}‚¶É P : Pullback f g ‚¶Ñ ‚Üí obj
A √ó[ C ] B = U

explicit√ó : (A B C : obj)(f : A ~> C)(g : B ~> C)‚¶É P : Pullback f g ‚¶Ñ ‚Üí obj
explicit√ó A B C f g = U

syntax explicit√ó A B C f g = A √ó[ f ~> C <~ g ] B

private
  module Properties {A B C : obj}
                    {f : A ~> C}{g : B ~> C}
                    ‚¶É P : Pullback f g ‚¶Ñ
                    where

    open import Type.Unit  
    open import Type.BinarySum  
    open import Proposition.Sum
    open import Data.FinNat  
    open import Logic
    open import Proof

    open import NaturalTransformation

    p‚ÇÅ = cone at ‚ÇÅ
    p‚ÇÇ = cone at ‚ÇÇ

    get-mor :
      {Z : obj}
      (z‚ÇÅ : Z ~> A)
      (z‚ÇÇ : Z ~> B)
      (p : f ‚àò z‚ÇÅ == g ‚àò z‚ÇÇ)
      ‚Üí ------------------
      Œ£‚Çö Œª (u : Z ~> A √ó[ C ] B) ‚Üí z‚ÇÅ == p‚ÇÅ ‚àò u ‚àß z‚ÇÇ == p‚ÇÇ ‚àò u ‚àß
        ‚àÄ (u' : Z ~> A √ó[ C ] B) (p : z‚ÇÅ == p‚ÇÅ ‚àò u' ‚àß z‚ÇÇ == p‚ÇÇ ‚àò u') ‚Üí u' == u
    get-mor z‚ÇÅ z‚ÇÇ p = !choice (‚ü∂ (‚Üî‚Üí‚àÉ!‚Üî‚àÉ! Œª u ‚Üí
      (Œª q ‚Üí q ‚ÇÅ , q ‚ÇÇ) ,
      (Œª { (q‚ÇÅ , q‚ÇÇ) ‚ÇÄ ‚Üí
        proof f ‚àò z‚ÇÅ
          === f ‚àò (cone at ‚ÇÅ ‚àò u)  :by: ap (f ‚àò_) q‚ÇÅ
          === f ‚àò cone at ‚ÇÅ ‚àò u    :by: assoc f _ u
          === cone at ‚ÇÄ ‚àò id (A √ó[ C ] B) ‚àò u
            :by: ap (_‚àò u) $ sym $ naturality ‚¶É cone ‚¶Ñ {‚ÇÅ}{‚ÇÄ} (inr ‚ãÜ)
          === cone at ‚ÇÄ ‚àò u   :by: ap (_‚àò u) $ right-unit (cone at ‚ÇÄ)
          qed 
         ; (q‚ÇÅ , _) ‚ÇÅ ‚Üí q‚ÇÅ
         ; (_ , q‚ÇÇ) ‚ÇÇ ‚Üí q‚ÇÇ})
      ) p')
      where p' = to-universal (PullbackCone z‚ÇÅ z‚ÇÇ p)
    
    ‚å©_,_‚å™ :
      {Z : obj}
      (z‚ÇÅ : Z ~> A)
      (z‚ÇÇ : Z ~> B)
      ‚¶É p : f ‚àò z‚ÇÅ == g ‚àò z‚ÇÇ ‚¶Ñ
      ‚Üí ------------------
      Z ~> A √ó[ C ] B
    ‚å© z‚ÇÅ , z‚ÇÇ ‚å™ = elem (get-mor z‚ÇÅ z‚ÇÇ from-instance)

open Properties hiding (get-mor) public
