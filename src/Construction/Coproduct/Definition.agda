{-# OPTIONS --exact-split --prop #-}
module Construction.Coproduct.Definition where

import Construction.Product.Definition as Prod
open Prod using (๐) public

open import Universes
open import Category

module WithFixedCategory โฆ โ : Category ๐ฐ ๐ฑ โฆ where

  open import Logic
  open import Proposition.Identity

  open import Construction.Cone.Definition ๐
    using (Diagram; Cocone)
  open import Category.Opposite
  open Prod
    using (ProductDiagram; ProductCone; IsProduct
          ; Product; _ร_; ฯโ; ฯโ; โฉ_,_โช)
  
  CoproductDiagram : (A B : obj) โ Diagram โฆ โ แตแต โฆ
  CoproductDiagram = ProductDiagram โฆ โ แตแต โฆ

  CoproductCocone :
    {A B : obj}
    {X : obj}
    (f : A ~> X)
    (g : B ~> X)
    โ -------------------------
    Cocone (CoproductDiagram A B) X
  CoproductCocone = CorpoductCocone' โ
    where CorpoductCocone' = dual (ฮป โ {A}{B}{X} โ ProductCone โฆ โ โฆ{A}{B}{X})
  
  IsCoproduct = IsCoproduct' โ
    where IsCoproduct' = dual (ฮป โ โ IsProduct โฆ โ โฆ)
  
  Coproduct = Coproduct' โ
    where Coproduct' = dual (ฮป โ โ Product โฆ โ โฆ)
  
  infixl 180 _+_
  _+_ : (A B : obj) โฆ P : Coproduct A B โฆ โ obj
  _+_ = _ร_ โฆ โ แตแต โฆ
  inl : {A B : obj} โฆ P : Coproduct A B โฆ โ A ~> A + B
  inl = ฯโ โฆ โ แตแต โฆ
  inr : {A B : obj} โฆ P : Coproduct A B โฆ โ B ~> A + B
  inr = ฯโ โฆ โ แตแต โฆ
  [_,_] :
    {A B X : obj}
    (f : A ~> X)
    (g : B ~> X)
    โฆ P : Coproduct A B โฆ
    โ --------------------
    โ! ฮป (h : A + B ~> X) โ f == h โ inl โง g == h โ inr
  [_,_] = โฉ_,_โช โฆ โ แตแต โฆ

  open import NaturalTransformation

  module Display where
    {-# DISPLAY _at_ P โ = inl #-}
    {-# DISPLAY _at_ P โ = inr #-}
  
open WithFixedCategory public

